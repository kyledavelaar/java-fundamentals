


Types/Generics only exist during compilation stage, when code is run there are no types.  So as long as it passes the compilation stage it will run even if the types are off.  This means however that code may fail when run.

This is important to know b/c Java didn't enforce type on collections in the past

List myList = {"string", 20, new Object()};
// this was perfectly legal


But now we need to cast only one type in a List
  List<String> myList = {"one", "two" };


Compiler will give warnings when mixing old and new Java collections saying you might have an issue.  It doesn't know for sure if you will but it will warn you nevertheless.



Casting:

  // with old Java you must cast!  B/c the type is not defined in collection
  List test = new ArrayList();
  test.add(43);
  int x = (Integer)test.get(0);


  // with new Java casting is no longer necessary
  List<Integer> test2 = new ArrayList<>();
  test2.add(1);
  int x = test2.get(0); // works fine


Generics must be of same type.  Cannot be a super/sub type like what is done polymorphically with List/ArrayList
  List<Number> i = new ArrayList<Integer>();  // does not work! even though Integer is a subclass of Number

What is confusing is this does work with arrays
  class Parent {}
  class Child extends Parent {}
  Parent[] arr = new Child[3];  // this does work.  but only in arrays


What if polymorphically want to pass many subTypes into a method using generics?  How would you do this without having to use arrays?  You need to use the super class as the <Animal> instead of the subClass types <Dog>

  abstract class Animal {
    public void abstract checkup();
  }
  class Dog extends Animal {
    public void checkup() {}
  }
  class Cat extends Animal {
    public void checkup() {}
  }
  public class AnimalDoctor {
    // can now take any subtype of Animal as long as don't add an item to the List passed in.  also 'extends' here refers to interfaces too.  just think of IS A.
    public void checkAnimals(List<? extends Animal> animalList)){
      for (Animal a: animalList) {
        a.checkup();
      }
    }
    // if you use 'super' you can add to the List anything that is a superSet of the class you are adding, so could add Animal here or Dog, but not Cat
    public void addAnimals(List<? super Dog> animalList) {
      animalList.add(new Dog());
    }
    // can also use <?> to have any type you want but be careful b/c while the method accepts anything the add method will only work with valid Animal objects
    public void addAnything(List<?> anything) {
      anything.add(3); // won't work
    }
    public static void main(String[] args) {
      List<Animal> animals = new ArrayList<Animal>();
      animals.add(new Dog());
      animals.add(new Cat());
      AnimalDoctor ad = new AnimalDoctor();
      ad.checkAnimals(animals);

    }
  }


Generics WildCard Rules
  - List<?> list = new ArrayList<Dog>(); // works fine
  - List<Dog> list = new ArrayList<?>(); // can't use wildcards in object creation
  - List<? extends Animal> list = new ArrayList<Dog>();  // works fine b/c Dog IS A animal
  - List<? super Dog> list = new ArrayList<Animal>(); // works fine b/c Animal is a superClass of Dog
  -List<? super Animal> list = new ArrayList<Dog>();  // does not work b/c Dog is not a superClass of Animal



Generic Declarations
  - T is "type", Java convention for anything that is not a collection
  - E is "element" Java convention for anything that is a collection
  - See Java collections API as an example:
    - public interface List<E>
    - E tells you that it will accept an Element of your choosing.  When we instantiate a list the E gets replaced with what type we put into it.  <Integer> for example.
    - also the methods for List use E and will get replaced too
    - boolean add(E e)
  -

Use Generics to create classes that can take any type

  import java.util.*
  public class RentalGeneric<T> {
    private List<T> rentalPool;
    private int maxNum;

    // constructor where T will get replaced when used with whatever type you place into it
    public RentalGeneric(int maxNum, List<T> rentalPool) {
      this.maxNum = maxNum;
      this.rentalPool = rentalPool;
    }

    public T getRental() {
      return rentalPool.get(0);
    }
    public void returnRental(T returnedThing) {
      rentalPool.add(returnedThing);
    }
  }

  class TestRental {
    public static void main(String[] args) {
      Car c1 = new Car();
      Car c2 = new Car();
      List<Car> l = new ArrayList<Car>();
      l.add(c1);
      l.add(c2);
      // T gets replaced with 'Car'
      RentalGeneric<Car> rg = new RentalGeneric<Car>(2, l);
      Car carToRent = rg.getRental();
      rg.returnRental(carToRent);
      l.add(5); // fails obviously.  l only accepts Cars
    }
  }

// can also extend with T instead of use ?

  public class AnimalHolder<T extends Animal> {
    T animal;
    public static void main(String[] args) {
      AnimalHolder<Dog> d = new AnimalHolder<Dog>(); // this works
      AnimalHolder<Integer> i = new AnimalHolder<Integer>() // error! won't work
    }
  }

// can also use T just on methods

  public class CreateAnArrayList {
    // <T> here is not the return type!  it is void so it returns nothing.  You need <T> here to be able to use T as an argument type
    public <T> void makeArrayList(T t) {
      List<T> list = new ArrayList<T>():
      list.add(t);
    }
  }

  // when you invoke makeArrayList and pass it a Dog() now, it will make a list of Dogs.  T gets replaced under the hood with Dog.

  // could also put boundary on T
    public <T extends Number> void makeArrayList(T t) {}


- You can use more than one parameterized type
  public class Two(T, X) {}

