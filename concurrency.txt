
java.util.concurrent

  - provides high-level APIs that can use to support multi-threading
  - usually the low level Thread, Runnable, wait() notify() is too primitive for most applications and often developers find they need to create higher level implementations.  java.util.concurrent provides some of these higher level APIs so developers don't have to build them

  - Apply Atomic Variables and Locks

    - ATOMIC: java.util.concurrent.atomic
      - enabled multi-threaded applications to safely access individual variables without locking
      - values can be modified atomically
      - for example say you need to increment a variable from multiple different threads and then get the count returned.  myVar++ may seem like is happening atomically but internally Java usually translates that into 3 execution steps.
      - so we use AtomicInteger instead

      public class Counter {
          private AtomicInteger count = new AtomicInteger();
          public void increment() {
            count.getAndIncrement(); // atomic operation instead of count++
          }
          public int getValue() {
            return count.intValue();
          }
      }

      - CAS (Compare and Swap) is what atomic processes are often called. Most CPUs have a set of CAS instructions for executions like variable incrementing, etc.


    - LOCKS: java.util.concurrent.locks
      - locking framework that creates locking behavior similar to Java's synchronized keyword
      - atomic variables work well for making single variables thread safe
      - but if you have two or more related variables then locks are the best way to go
        - for example video game character has gold coins in backpack and want to deposit them to a vault.  Need to track coins in vault and coins in backpack.
        - here you'd create two methods, one for depositing coins in the vault, and one for getting the character's wealth. You should never be able to do both of these methods at the same time.
      - java.util.concurrent.locks provides:
        - ability to duplicate traditional synchronized blocks
        - non-block scoped locking: obtain a lock in one method and release it in another
        - multiple wait/notify pools per lock, threads can select which pool they wait on
        - ability to attempt to acquire a lock and if fails do a different action
        - multiple reader, single writer lock implementations
      - java.util.concurrent.locks.ReentrantLock
        - the implementation of the locks interface classes

        Lock lock = new ReentrantLock();
        lock.lock();
        try {
          // do locked work
        } finally {
          lock.unlock(); // must manually release lock
        }

      - one of most powerful features is lock.tryLock() which tries without waiting b/c in standard lock implementation a thread can be blocked forever while waiting for a lock to become available

        Lock lock = new ReentrantLock();
        boolean locked = lock.tryLock(3, TimeUnit.SECONDS);
        if (locked) {
          try {
            // do locked work
          } finally {
            lock.unlock(); // must manually release lock
          }
        }
      - another benefit of tryLock is deadlock avoidance b/c in traditional locking implementations you have to acquire locks in the same order in all threads
      - for example this would result in deadlock

        Object o1 = new Object();
        Object o2 = new Object();

        synchronized (o1) {
          // thread a could pause here
          synchronized(o2)
        }

        synchronized(o2) {
          // thread b would get stuck here
          synchronized(o1)
        }

      - but with ReentrantLock

        Lock l1 = new ReentrantLock();
        Lock l2 = new ReentrantLock();
        boolean aq1 = l1.tryLock();
        boolean aq2 = l2.tryLock();
        try {
          if (aq1 && aq2) {
            // do work
          }
        } finally {
          // NEVER try to unlock a lock unless you know you have the lock
          if (aq2) l2.unlock();
          if (aq1) l1.unlock();
        }

    - CONDITION:
      - java.util.concurrent.locks.Condition (interface)
      - an interface that's a modern replacement of the traditional wait(), notify()
      // In Thread1
        Lock lock = new ReentrantLock();
        Condition blockingPoolA = new lock.newCondition();
        lock.lock();
        try {
          blockingPoolA.await(); // wait here, lock will be reacquired
          // once lock acquired from above line, we do some work
        } catch (InterruptedException e) {
          // interrupted during await()
        } finally {
          lock.unlock();  // must manually release lock
        }


      // In another thread (Thread2) you signal that the lock is available
        lock.lock();
        try {
          // work
          blockingPoolA.signalAll();  // wake all awaiting threads
        } finally {
          lock.unlock();
        }

      - why use condition over traditional wait/notify?
        - multiple conditions can exist for a lock
        - a condition is basically a waiting/blocking pool for a thread
        - by having multiple conditions you are categorizing the threads waiting on a lock and thus can wake up a subset of those threads instead of all of them if you want
        - Conditions can also be used when you can't use a BlockingQueue to coordinate the activities of two or more threads

        Lock lock = new ReentrantLock();
        Condition blockingPoolA = new lock.newCondition();
        Condition blockingPoolB = new lock.newCondition();

    - ReentrantReadWriteLock
      - Allows multiple threads to concurrently update or read an object in a safe way

        ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();
        Lock readLock = rwl.readLock();
        Lock writeLock = rwl.writeLock();

      - the two locks above are a matched set, one cannot be held at the same time as the other (by different threads)
      - multiple threads can hold the read lock but only one thread can hold the write lock at a time

      public class MaxValueCollection {
        private List<Integer> integers = new ArrayList<>();
        private ReentrantReadWriteLock rwl = new ReentrantReadWriteLock();

        public void add(Integer i) {
          rwl.writeLock().lock(); // so can only add one at a time
          try {
            integers.add(i);
          } finally {
            rwl.writeLock().unlock();
          }
        }

        public int findMax() {
          rwl.readLock().lock(); // lock that many threads can access
          try {
            return Collections.max(integers); // static method on Collections class
          } finally {
            rwl.readLock.unlock();
          }
        }
      }

      - if you didn't want to use locks like shown above you can also just use a thread safe collection

  - java.util.concurrent
    - using synchronization (synchronized blocks) to safeguard collections in multi-threaded environments can result in a performance bottleneck
    - java.util.concurrent provide thread safe collections that do not have the same performance problems
    - thus if you have a collection that will be concurrently accessed you should always use the collections from java.util.concurrent

    - CopyOnWriteArrayList
      - read only immutable objects are always thread safe
      - when the list is changed it always returns a new array
      - it does this through the use of an Iterator, which keeps track of what value is at what key
      - The iterator is created before it begins changing the object and the initial Iterator mappings (the old unchanged object that you began the loop with) don't change even if another thread changes a value while another thread is also going through the object
      - forEach loop uses an iterator so it is safe to use on a copy-on-write collection. But traditional loops are not
        - for(Object o: collection) {} // ok
        - for(int i = 0; i < collection.size(); i++) {} // bad
      - CopyOnWriteArrayList and CopyOnWriteArraySet are the two collections you'll use when data set is relatively small and the number of read operations and traversals out-weighs write operations
      - modifications to the collection (not the internal items within) are expensive because the entire collection must be copied/duplicated for each modification.
      - be careful...a thread safe collection makes the collection thread safe but not the items within the collection.  so you'll need to use atomic variables, locks, synchronized code blocks or immutable read only objects for those.

    - Concurrent Collections
      - ConcurrentHashMap
      - ConcurrentLinkedDeque
      - ConcurrentLinkedQueue
      - ConcurrentSkipListMap
      - ConcurrentSkipListSet































