

GOALS
  - loose coupling
  - high cohesion
  - ease of creation
  - ease of maintenance
  - each of enhancement

COUPLING
  - degree to which one class knows about another class
  - class A should only know what class B has exposed through its interface
  - usually achieved through encapsulation

COHESION
  - how a single class is designed
  - classes should have a well focused purpose
  - focused classes make them reusable

ENCAPSULATION
  - public variables used in other classes are a sign of poor encapsulation

OBJECT COMPOSITION
  - ClassA that HAS-a ClassB and IS-a ClassB

    public ClassA implements ClassB {
      private ClassB classB; // can now delegate to classB all of classB's logic

      classB.doStuff(); // and don't need to re-write doStuff() in ClassA as well
    }

  - This allows us code reuse
  - This allows us to have one subClass per functionality instead of having a class for every combination of functionalities, Mp3Video, MovVideo, etc.

SINGLETON
  - only one instance of a class
  - creational design pattern

DATA ACCESS OBJECT (DAO)
  - only responsible for storing data
  - 'single responsibility' is the principal being applied, it literally only stores data.  Think about a bookstore.  The DAO does not keep track of what a book is vs what a CD is.  It just stores those details, gets, deletes, updates, them.
  - also if we need to, we can swap out database implementations easily and not affect the core objects like Book and CD

FACTORY
  - factory pattern creates new objects
  - like the singleton but not limited to creating only 1 object
  - creational design pattern
  - decouples the caller from the implementation class name
  - 3 types of factories
    - Factory Method
      - shown in Factory.java class
      - creates classes that can be used in other classes
    - Abstract Factory
      - creates families of related classes
    - Factory
      - public Foo createFoo() { return new Foo(); }
  - Benefits of the factory pattern:
    - caller doesn't change when the factory returns different subclasses.  this means your core logic doesn't have to change when you are in testing environments or when in sql or nosql or whatever
    - centralizes creation logic outside of calling class.  prevents duplication, separation of concerns
    -







