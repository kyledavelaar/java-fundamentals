
One call stack per thread
  - main() method starts one thread
  - any other threads you start work concurrently with that main thread

JVMs and Threads
  - different JVMs can run threads in different ways so don't write code that only caters to one JVM.  Write thread safe code that will work in any JVM
  - for example some JVMs round robin nicely, others allow one thread to hog all the resources

daemon threads versus user threads
  - user threads are the main types of threads you will be writing
  - JVM will shut down once all user threads are done


java.lang.Thread

start()
yield()
sleep()
run()


Instantiate a thread in one of two ways:
  - Extend the java.lang.Thread class
    - won't typically do this b/c would only want to extend if want to create a subclass of behavior that builds upon the existing thread class
  - Implement the Runnable interface
    - will typically use this b/c just want to use thread behavior in your job
    - this also leaves your class able to extend another class


  class MyThreadClass extends Thread {
    public void run() {
      // put job logic here that you want run on a separate thread
      // Thread class expects no arguments passed into run
      // all code inside this method will be run in a new thread
      // also this method will be called for you when you instantiate MyThreadClass
      // there is no need to call myThreadClass.run();
      // here we are combining the job and the thread it is running on into one class
    }

    public void run(String s) {
      // overloaded method but warning!  Threads will only be used in run methods that have no arguments passed to them...so overloading here doesn't help you out much. All code here will be run on the main call stack. not a new call stack
      // you must call the overloaded method yourself
    }
  }


  class MyRunnable implements Runnable {
    public void run() {
      // put job logic here that want run on a separate thread
      // notice now the job logic is separated from the thread that will actually be used to run this job (much better)

      System.out.println("Job being run on thread " + Thread.currentThread().getName());

      for (int x = 0; int < 6; int++) {
        System.out.println("job running");
      }

      // when target run method of the thread completes, the thread is considered to be "done" and the stack for that thread dissolves
    }
  }

  public class TestThreads {
    public static void main(String[] args) {
      MyRunnable mr = new MyRunnable();
      // think of the thread as the "worker"
      // here we have one job being run by many workers
      Thread t1 = new Thread(mr);
      Thread t2 = new Thread(mr);
      Thread t3 = new Thread(mr);
      t1.setName("First Thread");

      // threads are not run in order so t2 could very easily finish or even start before t1, it is all up to the scheduler

      t1.start();  // can only call start on a Thread instance, NOT a Runnable!
      t2.start();
      t3.start();

      t1.isAlive() // logs if thread is still running
      t2.getState() // very useful for debugging

      t1.start() // NO CAN'T DO THIS -> once a thread is started, it can never be started again, even if the first run has completed
    }
  }

  Types of Thread() constructors are:
    - Thread() // used when extending Thread class
    - Thread(Runnable r) // used above when have separate runnable and thread class
    - Thread(Runnable r, String name)
    - Thread(String name)


  Thread states:
    - new
      - thread instance has been created but start() method not called yet
      - a live thread object but not a 'thread of execution'
      - thread considered 'not alive' yet
    - runnable
      - eligible to be run but scheduler has not picked it up yet
      - moves into runnable state when start() method invoked
      - can also move back into runnable state from a blocked, waiting, or sleeping state
    - running
      - scheduler chooses this thread and says, okay run now
      - run() method called and actively working on the job logic
    - waiting/blocked/sleeping
      - not eligible to run, it is alive just not runnable
      - why put in this state?  it could be waiting for resources to come available, or an object might have a lock on it
      - may be sleeping b/c the code tells the thread to sleep for a period of time
      - you can't tell another thread to sleep or wait or block it in any way
    - dead
      - run method completes
      - can never be brought back to life and executed again

  Sleep()
    - call in run() method to stop job from running for >= a set time
    - static method on the Thread class
    - Thread.sleep(5000);  // 5 seconds

  Priorities
    - can give a thread a priority from 1 to 10 and it will usually be granted but not always
    - default priority is 5
      Thread t = new Thread();
      t.setPriority(8);
      t.start();

  Yield()
    - call in run() method to stop job from running and give other jobs with higher priority a chance to run (no guarantee this will happen)

  Join()
    - lets one thread join onto the end of another thread
    - Thread B for example can't finish its work until Thread A is done so you would join B to A.  B will then run sometime after A's completion.
    - join() can cause the current thread to stop executing until the thread it joins with completes
      Thread a = new Thread(runnableJobA);
      a.start();
      Thread b = new Thread(runnableJobB);
      b.start();
      // now both thread running simultaneously if multi-core
      b.join(); // A joins to the end of B
      // B will be the only job running now...when it completes A will again resume


  Scheduler:
    - In single Processor machines only one thread can run at once.  The scheduler determines which thread will run at any one time.


  How avoid Race Conditions of two threads both accessing same Object?
    - use synchronized access control modifier on any method that needs to fully complete before it can be run by another thread.  (i.e. method can never run simultaneously on two threads)
      private synchronized void makeWithdrawal(int amount) {
        // only one thread can access this method at a time
      }
    - Think of checking account and married couple.  They both have access and try to withdrawal money at the same time.  If both are on a separate thread without a synchronized modifier on the withdrawal() method they could both withdrawal even if not enough money is in the account for both of them.
    - Every Java object has a built in lock that only comes into play when there is a synchronized method
    - if a thread goes to sleep it holds onto the locks it has, it doesn't release them
    - a thread can acquire more than one lock.  i.e. it can call a synchronized method on one object and then a synchronized method on a different object.
    - one thread can call multiple synchronized methods on the same object. JVM knows that this thread already has a lock on this object.
    - synchronization does hurt concurrency so synchronize as little as possible

  - You can synchronize a block of code rather than a method.
    class SyncTest {
      public void doStuff() {
        System.out.println("not synchronized");
        // you can synchronize with a lock on any object in a synchronized block
        // in this case we used "this" to say the current object is where we want the lock placed.  But we could use an outside object as well and we'd do that by replacing "this" with the instance of that object.
        synchronized(this) {
          System.out.println("synchronized");
        }
      }
    }





Synchronizing static methods:
  - in static methods there can only ever be one copy of the data so there will only be one lock (for the entire class)
    public static synchronized int getCount() {
      return count; // same as non static methods
    }

  // or can use synchronized block (but syntax is a little different for static)
    public static int getCount() {
      synchronized(MyClass.class) {
        return count;
      }
    }

  - MyClass.class is a class literal and tells the JVM that MyClass is the one we are putting the lock on



Be careful with non-static methods that change static variables and vice versa
  - why? b/c a single lock can only be for the static or non-static variables (not both)
  - so if you synchronize a static method and then update non-static instance variables from that method, the lock is not on those instance variables and another process also updating those instance variables will be able to do so b/c they are not bound to the static lock.
  - so always only update static from static methods and non-static from non-static methods (like below)

  public class Thing {
    private static int staticField;
    private int nonStaticField;
    public static synchronized int getStaticField() {
      return staticField;
    }
    public static synchronized void setStaticField(int staticField) {
      Thing.staticField = staticField;
    }
    public static synchronized int getNonStaticField() {
      return nonStaticField;
    }
    public synchronized void setNonStaticField(int nonStaticField) {
      this.nonStaticField = nonStaticField;
    }
  }


Thread Safe Classes
  - When we follow the rules above we can say a class is thread-safe
  - Some built in java classes are already thread safe.  StringBuffer has synchronized methods to make it thread safe while StringBuilder has all the same methods but they are no synchronized so it is not thread safe.  However it is faster b/c it is not synchronized.
  - Be careful with so called 'thread safe' built in classes.  All the methods are synchronized but there is nothing stopping something else from being called in between two synchronized methods.  For example Collections.SynchronizedList(new LinkedList()) you can call add() and remove() methods but what if something else happens between add and remove that affects the list.  Then you might be trying to remove something that is no longer there.


Thread Deadlock:
  - 2 thread blocked b/c they are waiting for each other's lock
  - example: thread A acquires lock 1 and then waits for lock 2 to open up, b/c lock 2 is already being used by thread D.  However thread D wants to run a task on lock 1 but it can't do it b/c A already has the lock on it.  So D will never complete meaning A will never complete.
  - solution: try to acquire locks in a predefined order


Wait/Notify:
  - One thread calls wait() so it isn't constantly running and then waits for a notify() call from another thread to wake it up and get it running again.
  - But warning: wait() and notify() must be called from within a synchronized context.  A thread can't invoke wait() or notify() unless it owns that object's lock.

  class c {
    public static void main(String[] args) {
      ThreadB b = new ThreadB();
      b.start();

      // acquires lock on b b/c otherwise couldn't call b.wait()
      synchronized(b) {
        try {
          System.out.println("waiting for b to complete");
          b.wait(); // releases lock on b and waits for some other code that has a lock on b to call notify()
          // code is now blocked until it is given the lock back from notify()
          // but if there is other code inside the synchronized block after notify() that code will be run first before it gets sent back here
        } catch (InterruptedException e) {
          System.out.println("Total is: " + b.total);
        }
      }
    }
  }

  class ThreadB extends Thread {
    int total;

    public void run() {
      synchronized(this) {
        for (int i = 0; i < 100; i++) {
          total += i;
        }
        // usually want to use notifyAll() b/c notify() will only notify one thread and it is not guaranteed to be the thread you are trying to target
        notify();
        // if other code happens here it will be run before the wait() is executed in ThreadA
      }
    }
  }


Possible Problems:
  - notifyAll() or notify() could happen before wait() and then the thread will be waiting forever
  - one way to handle this is to put a loop that checks on a conditional and only waits if it needs to

  class Operator extends Thread {
    Machine machine = new Machine();
    public void run() {
      while(true) {
        // constantly get shapes from user
        Shape shape = getShapeFromUser();
        MachineInstructions job = calculateNewInstructionsForShape(shape);
        machine.addJob(job);
      }
    }
  }

  class Machine extends Thread {
    List<MachineInstructions> jobs = new ArrayList<MachinesInstructions>();

    public void addJob(MachineInstructions job) {
      // can put a lock on any object, doesn't always have to be a class, in this case it is an ArrayList
      synchronized(jobs) {
        jobs.addJob(job);
        jobs.notify();
      }
    }

    public void run() {
      // constantly listening to see if there are any new jobs passed
      while(true) {
        // listening to same lock
        synchronized(jobs) {
          // only wait while jobs is empty, when we already have a job we don't want to wait b/c we need to process that job, when we have no jobs to process we want to hibernate this thread until the next notify()
          // in this use case any time the thread is woken up it will always be given a job but there are times the JVM wakes up thread on its own for no good reason so we can't expect jobs.notify() to be the only person to wake this thread up.  As a result it is always a good idea to add these extra checks
          while(jobs.isEmpty()) {
            try {
              jobs.wait();
            } catch(InterruptedException ie) {

            }
          }
          // now we know jobs is not empty
          MachineInstructions mi = jobs.remove(0);
          // send machine steps to hardware
        }
      }
    }
  }













