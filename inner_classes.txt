//////////////////////////////////////////////////////////////////////
Regular Inner Classes:
//////////////////////////////////////////////////////////////////////

  - has access to all members (variables/methods) in outer class, even those marked private
  - They are not:
    - static
    - method-local
    - anonymous
  - Inner classes cannot have static declarations of any kind
  - Only way can access inner class is through a live instance of the outer class

    class MyOuter {
      private int x = 7;
      public void makeInner() {
        MyInner inner = new MyInner();
        inner.log();
      }
      class MyInner {
        public void log() {
          System.out.println("inner classes can access all private stuff" + x);
          // can get 'this' for outer class by -> MyOuter.this
        }
      }
    }

  - Can create inner class from outside the outer class like this (must have an outer class instance!)

    public static void main(String[] args) {
      MyOuter mo = new MyOuter();
      MyOuter.MyInner inner = mo.new MyInner();
      inner.log();
    }

    or same thing but in one line

    public static void main(String[] args) {
      MyOuter.MyInner inner = new MyOuter().new MyInner();
      inner.log();
    }

//////////////////////////////////////////////////////////////////////
Method Local Inner Classes
//////////////////////////////////////////////////////////////////////

  class MyOuter {
    private String x = "hi";

    void doStuff() {
      String z = "method variable"; // cannot use this in the inner class b/c method variables are cleared from the heap once the method is completed.  If want to use a method variable you must mark it as 'final'
      class MyInner {
        public void seeOuter() {
          System.out.println("has access to outer private " + x);
        }
      }
      MyInner mi = new MyInner();
      mi.seeOuter();
    }
  }

//////////////////////////////////////////////////////////////////////
Anonymous Inner Classes
//////////////////////////////////////////////////////////////////////

  class Popcorn {
    public void pop() {
      System.out.println("in Outer");
    }
  }

  // p here is not an instance of Popcorn but is an instance of a just-in-time anonymous unnamed subclass of Popcorn b/c it has {} after new PopCorn() instead of ;
  class Food {
    Popcorn p = new Popcorn() {
      // overrides pop in outer Popcorn class
      public void pop() {
        System.out.println("in inner");
      }
      public void sizzle() {} // this method will blow up when called b/c not in base class (think polymorphism)s
    }; // note the semi-colon here!  odd but necessary!
  }

  - the whole point of anonymous inner classes is to override one or more methods of the superclass or to implement methods of an interface
  - can only add methods that are in the outer class

  - can also use an interface

  interface Cookable {
    public void cook() {}
  }

  class Food {
    // typically can't instantiate an interface, you have to implement it in some other class and then instantiate that class, but this is like doing two things at once
    Cookable c = new Cookable() {
      public void cook() {
        // implementing the cook method
      }
    };
  }


  Lastly can add them as arguments to functions.  This is a quick way to not have to implement an interface and then also instantiate that implementor class.

    class MyClass {
      void go() {
        Bar b = new Bar();
        b.doStuff(new Foo() {
          public void makeFoo() {}
        });  // note the semi-colon goes outside the ) when used as a method arg
      }
    }

    interface Foo {
      void makeFoo();
    }
    class Bar {
      void doStuff(Foo f) {}
    }


//////////////////////////////////////////////////////////////////////
Static Nested Classes
//////////////////////////////////////////////////////////////////////
  - a class that's a static member of the enclosing class
  - just like any other static property:
    - inner class can be accessed without an instance of the outer class
    - static classes cannot access anything non-static

  class BigOuter {
    static class Nested {
      void go() {
        System.out.println("go");
      }
    }
  }

  class Broom {
    static class B2 {
      void goB2() {
        System.out.println("go2");
      }
      public static void main(String[] args) {
        BigOuter.Nest n = new BigOuter.Nest();
        n.go();  // "go"
        B2 b2 = new B2();
        b2.goB2(); // "go2"
      }
    }
  }





